import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { AlertTriangle, ShieldAlert, Info } from "lucide-react";

interface Vulnerability {
  id: string;
  title: string;
  severity: "critical" | "high" | "medium" | "low";
  cve: string;
  description: string;
}

const mockVulnerabilities: Vulnerability[] = [
  {
    id: "1",
    title: "SQL Injection in Login Form",
    severity: "critical",
    cve: "CVE-2024-1234",
    description: "Authentication bypass via SQL injection vulnerability"
  },
  {
    id: "2",
    title: "Outdated SSL/TLS Configuration",
    severity: "high",
    cve: "CVE-2023-5678",
    description: "Server supports weak cipher suites"
  },
  {
    id: "3",
    title: "Missing Security Headers",
    severity: "medium",
    cve: "N/A",
    description: "X-Frame-Options and CSP headers not configured"
  },
  {
    id: "4",
    title: "Information Disclosure",
    severity: "low",
    cve: "CVE-2023-9012",
    description: "Server version exposed in HTTP headers"
  },
];

export default function VulnerabilityAssessment() {
  const [vulnerabilities] = useState<Vulnerability[]>(mockVulnerabilities);

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical": return "bg-destructive/20 text-destructive border-destructive/30";
      case "high": return "bg-chart-4/20 text-chart-4 border-chart-4/30";
      case "medium": return "bg-chart-2/20 text-chart-2 border-chart-2/30";
      case "low": return "bg-chart-1/20 text-chart-1 border-chart-1/30";
      default: return "";
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "critical":
      case "high":
        return <ShieldAlert className="h-4 w-4" />;
      case "medium":
        return <AlertTriangle className="h-4 w-4" />;
      case "low":
        return <Info className="h-4 w-4" />;
      default:
        return null;
    }
  };

  return (
    <Card className="glow-magenta" data-testid="card-vulnerability">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <ShieldAlert className="h-5 w-5 text-chart-2" />
          Vulnerability Assessment
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-3" data-testid="container-vulnerabilities">
          {vulnerabilities.map((vuln) => (
            <div 
              key={vuln.id} 
              className="p-3 rounded-md border border-border bg-card/50 hover-elevate space-y-2"
              data-testid={`card-vulnerability-${vuln.id}`}
            >
              <div className="flex items-start justify-between gap-2">
                <div className="flex-1">
                  <h4 className="font-semibold text-sm" data-testid={`text-vuln-title-${vuln.id}`}>{vuln.title}</h4>
                  <p className="text-xs text-muted-foreground mt-1">{vuln.description}</p>
                </div>
                <Badge 
                  className={`${getSeverityColor(vuln.severity)} border flex items-center gap-1`}
                  data-testid={`badge-severity-${vuln.id}`}
                >
                  {getSeverityIcon(vuln.severity)}
                  {vuln.severity}
                </Badge>
              </div>
              <div className="text-xs font-mono text-primary" data-testid={`text-cve-${vuln.id}`}>{vuln.cve}</div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}
